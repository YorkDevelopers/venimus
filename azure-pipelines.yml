trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - server/tools/MockAuth/*
    - mockauth-azure-pipelines.yml
    - yorkdeveloperevents/*
    - yorkdeveloperevents-azure-pipelines.yml
    
pool:
  vmImage: 'Ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  apiimageName: 'venimus-api'
  dockerRegistryServiceConnection: 'venimuscr'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '3.1.x'

- script: dotnet build "./server/src/VenimusAPIs/VenimusAPIs.csproj" --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

- script: docker run -d -p 27017:27017 mongo
  displayName: 'Setup MongoDB'

- script: dotnet test ./server/tests/VenimusAPIs.Tests/VenimusAPIs.Tests.csproj --logger:trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
  displayName: 'Running tests'
  env: 
    MongoDB__connectionString: "mongodb://localhost"
    MongoDB__databaseName: "TestDatabase"
    Auth0__Domain: "venimus-mockauth.azurewebsites.net"
    Auth0__Audience: "https://Venimus.YorkDevelopers.org"

# Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
# First install the tool on the machine, then run it
- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator -reports:$(Build.SourcesDirectory)/tests/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
  displayName: Create Code coverage report

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

- script: dotnet publish "./server/src/VenimusAPIs/VenimusAPIs.csproj" --configuration $(buildConfiguration) --output '$(Build.ArtifactStagingDirectory)/api'
  displayName: 'dotnet publish $(buildConfiguration)'
  
- pwsh: ((Get-Content -path .\default.html -Raw) -replace '<!--versionNumber-->', $env:VERSION_NUMBER) | Set-Content -Path .\default.html
  workingDirectory: "$(Build.ArtifactStagingDirectory)/api/wwwroot"
  env:
    VERSION_NUMBER: '1.0.$(Build.BuildID)'
  displayName: 'Set up version to the view'

- task: PublishBuildArtifacts@1

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true

- task: Docker@2
  displayName: Build an API image
  inputs:
    repository: $(apiimageName)
    command: buildAndPush
    Dockerfile: ./server/src/VenimusAPIs/Dockerfile  
    buildContext: "$(Build.ArtifactStagingDirectory)/api"
    containerRegistry: $(dockerRegistryServiceConnection)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
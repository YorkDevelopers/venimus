<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VenimusAPIs</name>
    </assembly>
    <members>
        <member name="M:VenimusAPIs.Controllers.EventsAttendeesController.Get(System.String,System.String)">
             <summary>
                 Allows you to retrieve the members of an event
             </summary>
             <remarks>
             Sample request:
            
                 GET /api/groups/YorkCodeDojo/Events/Nov2019/Members
            
             </remarks>
             <returns>The ListEventAttendees view model</returns>
             <response code="200">Success</response>
             <response code="401">No Access.</response>
             <response code="403">No Permission.</response>
             <response code="404">Group does not exist.</response>
        </member>
        <member name="M:VenimusAPIs.Controllers.EventsController.Post(System.String,VenimusAPIs.ViewModels.CreateEvent)">
             <summary>
                 Allows you to create a new event for your group.
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/groups/YorkCodeDojo/events
                 {
                     "slug" : "Oct2019"
                     "title" : "Game of Life - Oct 2019",
                     "description" : "Tonight we will work in pairs implementing the **classic Game Of Life**"
                     "location" : "Room 12"
                     "startTime" : "2019-12-12 18:30"
                     "endTime" : "2019-12-12 21:00"
                 }
            
             </remarks>
             <returns>The route to the created event</returns>
             <response code="201">Success</response>
             <response code="401">User is not authorized.</response>
             <response code="404">The group does not exist.</response>
        </member>
        <member name="M:VenimusAPIs.Controllers.EventsController.Put(System.String,System.String,VenimusAPIs.ViewModels.UpdateEvent)">
             <summary>
                 Allows you to amend the details of an existing event
             </summary>
             <remarks>
             Sample request:
            
                 PUT /api/groups/YorkCodeDojo/events/12345
                 {
                     "slug" : "Oct2019"
                     "title" : "Game of Life - Oct 2019",
                     "description" : "Tonight we will work in pairs implementing the **classic Game Of Life**"
                     "location" : "Room 12"
                     "startTime" : "2019-12-12 18:30"
                     "endTime" : "2019-12-12 21:00"
                     "host" : "E Betteridge"
                     "speaker" : "J Betteridge"
                 }
            
             </remarks>
             <returns>No data</returns>
             <response code="204">Success</response>
             <response code="401">User is not authorized.</response>
             <response code="404">The group or event does not exist.</response>
        </member>
        <member name="M:VenimusAPIs.Controllers.EventsController.Delete(System.String,System.String)">
             <summary>
                 Allows an administrator to delete an event
             </summary>
             <remarks>
             Sample request:
            
                 DELETE /api/groups/YorkCodeDojo/events/1234
            
             </remarks>
             <returns>NoContent</returns>
             <response code="204">Success</response>
        </member>
        <member name="M:VenimusAPIs.Controllers.EventsController.Get(System.String,System.String)">
             <summary>
                 Allows you to retrieve the details of an event
             </summary>
             <remarks>
             Sample request:
            
                 GET /api/groups/YorkCodeDojo/events/1234
            
             </remarks>
             <returns>The GetEvent view model</returns>
             <response code="200">Success</response>
             <response code="404">Group or Event does not exist.</response>
        </member>
        <member name="M:VenimusAPIs.Controllers.GroupsController.Post(VenimusAPIs.ViewModels.CreateGroup)">
             <summary>
                 Allows you to create a new group
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/groups
                 {
                     "slug" : "YorkCodeDojo",
                     "name" : "York Cod eDojo",
                     "isActive" : true,
                     "slackChannelName" : "YorkCodeDojo",
                     "logoInBase64" : "1111",
                     "description" : "Improve your code by practice."
                 }
            
             </remarks>
             <returns>The route to the created group</returns>
             <response code="201">Success</response>
             <response code="401">User is not authorized.</response>
        </member>
        <member name="M:VenimusAPIs.Controllers.GroupsController.Put(MassTransit.IBus,System.String,VenimusAPIs.ViewModels.UpdateGroup)">
             <summary>
                 Allows you to update an existing group
             </summary>
             <remarks>
             Sample request:
            
                 PUT /api/groups/YorkCodeDojo
                 {
                     "slug" : "YorkCodeDojo",
                     "name" : "York Cod eDojo",
                     "isActive" : true,
                     "slackChannelName" : "YorkCodeDojo",
                     "logoInBase64" : "1111",
                     "description" : "Improve your code by practice."
                 }
            
             </remarks>
             <returns>The route to the created group</returns>
             <response code="201">Success</response>
             <response code="401">User is not authorized.</response>
        </member>
        <member name="M:VenimusAPIs.Controllers.GroupsController.Get(System.String)">
             <summary>
                 Allows you to retrieve the details of a group
             </summary>
             <remarks>
             Sample request:
            
                 GET /api/groups/YorkCodeDojo
            
             </remarks>
             <returns>The GetGroup view model</returns>
             <response code="200">Success</response>
             <response code="404">Group does not exist.</response>
        </member>
        <member name="M:VenimusAPIs.Controllers.GroupsController.Get(VenimusAPIs.Services.URLBuilder,System.Boolean,System.Boolean)">
             <summary>
                 Allows you to retrieve the list of all groups
             </summary>
             <remarks>
             Sample request:
            
                 GET /api/groups
            
             </remarks>
             <returns>An array of ListGroup view models</returns>
             <response code="200">Success</response>
        </member>
        <member name="M:VenimusAPIs.Controllers.GroupsController.GetLogo(System.String)">
             <summary>
                 Allows you to get the logo for a group
             </summary>
             <remarks>
             Sample request:
            
                 GET /api/groups/YORKCODEDOJO/logo
            
             </remarks>
             <returns>byte array for the image</returns>
             <response code="200">Success</response>
        </member>
        <member name="M:VenimusAPIs.Controllers.GroupsController.Delete(System.String)">
             <summary>
                 Allows you to delete an existing group
             </summary>
             <remarks>
             Sample request:
            
                 DELETE /api/groups/YorkCodeDojo
            
             </remarks>
             <returns>Nothing</returns>
             <response code="204">NoContent</response>
             <response code="401">User is not authorized.</response>
        </member>
        <member name="M:VenimusAPIs.Controllers.GroupsMembersController.Get(System.String)">
             <summary>
                 Allows you to retrieve the members of a group
             </summary>
             <remarks>
             Sample request:
            
                 GET /api/groups/YorkCodeDojo/Members
            
             </remarks>
             <returns>The ListGroupMembers view model</returns>
             <response code="200">Success</response>
             <response code="401">No Access.</response>
             <response code="403">No Permission.</response>
             <response code="404">Group does not exist.</response>
        </member>
        <member name="M:VenimusAPIs.Controllers.UsersController.GetLogo(System.String)">
             <summary>
                 Allows you to get the profile picture for a user
             </summary>
             <remarks>
             Sample request:
            
                 GET /api/users/YORKCODEDOJO/profilepicture
            
             </remarks>
             <returns>byte array for the image</returns>
             <response code="200">Success</response>
        </member>
        <member name="M:VenimusAPIs.Controllers.FutureEventsController.Get">
             <summary>
                 Allows you request the list of future events.  Maximum of 10 per group.
             </summary>
             <remarks>
             Sample request:
            
                 GET /public/FutureEvents
            
             </remarks>
             <returns>Array of FutureEvent view models</returns>
             <response code="200">Success</response>
        </member>
        <member name="P:VenimusAPIs.Models.Group.Id">
            <summary>
                The unique internal ID of this group
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.Group.IsActive">
            <summary>
                Is this group still actively running events?
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.Group.Slug">
            <summary>
                The unique external id for the group.  For example YorkCodeDojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.Group.Name">
            <summary>
            The unique name for the group / community.  For example York Code Dojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.Group.Description">
            <summary>
            A description of the group in markdown
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.Group.StrapLine">
            <summary>
            A very short one-line description of the group
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.Group.Logo">
            <summary>
                The group's logo.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.Group.Members">
            <summary>
            Members of this group
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.Group.SlackChannelName">
            <summary>
                The name of this groups slack channel
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.Id">
            <summary>
                The unique internal ID for the event
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.Slug">
            <summary>
                The unique external id for the event.  For example May2019
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.GroupId">
            <summary>
                The internal ID of the group to which this event belongs
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.GroupSlug">
            <summary>
                The external ID of the group to which this event belongs
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.GroupName">
            <summary>
                The name of the group the event belongs to
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.Title">
            <summary>
            The title of the event,  for example March 2019 Meetup. Must be unique for the group.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.Description">
            <summary>
            A description of the event,  in markdown format.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.Location">
            <summary>
            The location of the event, for example York Minster,  Room 201 York St John University
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.StartTimeUTC">
            <summary>
            Date and time the event starts
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.EndTimeUTC">
            <summary>
            Date and time the event ends.  Must be after the StartTime
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.MaximumNumberOfAttendees">
            <summary>
                How many people + guests are allowed to sign up.  This includes hosts and speakers
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.GuestsAllowed">
            <summary>
                Are members allowed to bring guests to this event?
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.Members">
            <summary>
            Attendees of this group
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEvent.Questions">
            <summary>
                Questions to ask the user when they are registering
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEventAttendees.SignedUp">
            <summary>
                Are they still signed up
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEventAttendees.Attended">
            <summary>
                Did they attend the event?
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEventAttendees.Host">
            <summary>
                Are they organising the event
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEventAttendees.Speaker">
            <summary>
                Are they presenting at the event
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEventAttendees.DietaryRequirements">
            <summary>
                Any Dietary Requirements the user has
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEventAttendees.MessageToOrganiser">
            <summary>
                Free format message to the organiser
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEventAttendees.NumberOfGuests">
            <summary>
                The number of unregistered guest the person is bringing
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEventAttendees.EmailAddress">
            <summary>
                The email address which also links all the social media accounts together.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEventAttendees.Pronoun">
            <summary>
                The users preferred personal pronon.  e.g. Him
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEventAttendees.Fullname">
            <summary>
                The user's fullname.  e.g David Betteridge
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEventAttendees.DisplayName">
            <summary>
                The user's name within the system.  Ideally the same as their slack name.  e.g. DavidB
                (Has to be unique)
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupEventAttendees.Bio">
            <summary>
                The user's biography.  This can include their place of work/student,  any interests etc.
                Visible to all signed in members
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupMember.UserId">
            <summary>
                Unique ID of the user
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupMember.IsAdministrator">
            <summary>
                Are they an administrator of the group?
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupMember.EmailAddress">
            <summary>
                The email address which also links all the social media accounts together.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupMember.Pronoun">
            <summary>
                The users preferred personal pronon.  e.g. Him
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupMember.Fullname">
            <summary>
                The user's fullname.  e.g David Betteridge
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupMember.DisplayName">
            <summary>
                The user's name within the system.  Ideally the same as their slack name.  e.g. DavidB
                (Has to be unique)
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupMember.Bio">
            <summary>
                The user's biography.  This can include their place of work/student,  any interests etc.
                Visible to all signed in members
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.GroupMember.IsUserApproved">
            <summary>
                Has their membership to YorkDevelopers been approved by an administrator?
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.Question.Code">
            <summary>
                Unique ID for this question.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.Question.Caption">
            <summary>
                Question shown to the user
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.Question.QuestionType">
            <summary>
                Type of question,  text, date, boolean etc
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.User.Id">
            <summary>
                The internal ID for the user.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.User.EmailAddress">
            <summary>
                The email address which also links all the social media accounts together.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.User.Pronoun">
            <summary>
                The users preferred personal pronon.  e.g. Him
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.User.Fullname">
            <summary>
                The user's fullname.  e.g David Betteridge
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.User.DisplayName">
            <summary>
                The user's name within the system.  Ideally the same as their slack name.  e.g. DavidB
                (Has to be unique)
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.User.Bio">
            <summary>
                The user's biography.  This can include their place of work/student,  any interests etc.
                Visible to all signed in members
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.User.ProfilePicture">
            <summary>
                The user's profile picture
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.User.Identities">
            <summary>
                The user's social media identities
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.User.IsRegistered">
            <summary>
                Has the user completed the registration stage (ie. entered all their details)
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.User.IsApproved">
            <summary>
                Has their membership been approved by an administrator?
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.User.IsRejected">
            <summary>
                Has their membership been blocked by an administrator?
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.User.ApprovedorRejectedBy">
            <summary>
                Who approved/rejected their membership?
            </summary>
        </member>
        <member name="P:VenimusAPIs.Models.User.ApprovedorRejectedOnUtc">
            <summary>
                When were they approved/rejected?
            </summary>
        </member>
        <member name="T:VenimusAPIs.Resources.ResourceMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.EVENT_ALREADY_EXISTS">
            <summary>
              Looks up a localized string similar to An event with this slug already exists for this group..
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.EVENT_END_BEFORE_START">
            <summary>
              Looks up a localized string similar to You cannot create an event which ends before it starts..
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.EVENT_HAS_HAPPENED">
            <summary>
              Looks up a localized string similar to The event cannot be deleted as it has already taken place..
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.EVENT_HAS_TAKEN_PLACE">
            <summary>
              Looks up a localized string similar to This event has already taken place.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.EVENT_IN_THE_PAST">
            <summary>
              Looks up a localized string similar to You cannot create an event in the past..
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.GROUP_ALREADY_EXISTS_WITH_THIS_NAME">
            <summary>
              Looks up a localized string similar to A group using this name already exists.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.GROUP_ALREADY_EXISTS_WITH_THIS_SLUG">
            <summary>
              Looks up a localized string similar to A group using this slug already exists.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.GROUP_HAS_EVENTS">
            <summary>
              Looks up a localized string similar to The group cannot be deleted as it has one or events.  Please mark the group as InActive instead..
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.GUESTS_NOT_ALLOWED">
            <summary>
              Looks up a localized string similar to This event does not allow you to bring guests.  All attendees must be members of this group..
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.INTERNALERROR_GROUP_DOES_NOT_EXIST">
            <summary>
              Looks up a localized string similar to Internal Error - The group does not exist in the database..
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.INTERNALERROR_USER_DOES_NOT_EXIST">
            <summary>
              Looks up a localized string similar to Internal Error - The user does not exist in the database..
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.INTERNALERROR_USER_DOES_NOT_HAVE_ACCESS_TOKEN">
            <summary>
              Looks up a localized string similar to Internal Error  -The user does not have an access token..
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.MEMBER_ALREADY_APPROVED">
            <summary>
              Looks up a localized string similar to The user&apos;s membership of this group has already been approved..
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.NOT_A_MEMBER_OF_THE_GROUP">
            <summary>
              Looks up a localized string similar to The user does not belong to this group.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.NUMBER_OF_GUESTS_IS_NEGATIVE">
            <summary>
              Looks up a localized string similar to The NumberOfGuests cannot be less than zero..
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.QUESTION_NUMBEROFGUESTS">
            <summary>
              Looks up a localized string similar to Number of Guests.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.SLACK_APPROVE_BUTTON">
            <summary>
              Looks up a localized string similar to Approve.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.SLACK_REJECT_BUTTON">
            <summary>
              Looks up a localized string similar to Reject.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.TOO_MANY_PEOPLE">
            <summary>
              Looks up a localized string similar to Sorry this will exceed the maximum number of people allowed to attend this event..
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.USER_ALREADY_EXISTS_WITH_THIS_NAME">
            <summary>
              Looks up a localized string similar to A user with this display name already exists..
            </summary>
        </member>
        <member name="P:VenimusAPIs.Resources.ResourceMessages.USER_ALREADY_SIGNED_UP">
            <summary>
              Looks up a localized string similar to You are already signed up to this event..
            </summary>
        </member>
        <member name="P:VenimusAPIs.ServiceBusMessages.GroupChangedMessage.GroupId">
            <summary>
                The unique internal ID of this group
            </summary>
        </member>
        <member name="P:VenimusAPIs.ServiceBusMessages.UserChangedMessage.UserId">
            <summary>
                The unique internal ID of this user
            </summary>
        </member>
        <member name="P:VenimusAPIs.Settings.SlackSettings.ApproversWebhookUrl">
            <summary>
                The webhook to send the approve membership messaeg to.
            </summary>
        </member>
        <member name="M:VenimusAPIs.UserControllers.UserConnectedController.Post">
             <summary>
                 Called once the user has connected to the frontend.  This ensures that they exist in the database.
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/users/connected
                 {
                 }
            
             </remarks>
             <returns>The route to the user</returns>
             <response code="201">Success</response>
        </member>
        <member name="M:VenimusAPIs.UserControllers.UserDetailsController.Get">
             <summary>
                 Allows the current user to retrieve their personal profile
             </summary>
             <remarks>
             Sample request:
            
                 GET /api/user
            
             </remarks>
             <returns>ViewMyDetails view model</returns>
             <response code="200">Success</response>
        </member>
        <member name="M:VenimusAPIs.UserControllers.UserDetailsController.Put(MassTransit.IBus,VenimusAPIs.ViewModels.UpdateMyDetails)">
             <summary>
                 Allows the current user to update their personal profile
             </summary>
             <remarks>
             Sample request:
            
                 PUT /api/user
                 {
                     "pronoun" : "Him"
                     "Fullname" : "David Betteridge",
                     "DisplayName" : "David B",
                     "Bio" : "I am me",
                     "profilePictureAsBase64" : "123123123",
                 }
            
             </remarks>
             <returns>NoContent</returns>
             <response code="204">Success</response>
        </member>
        <member name="M:VenimusAPIs.UserControllers.UserEventsController.Get">
             <summary>
                 Allows the current user to retrieve all the future events they have signed up to.
             </summary>
             <remarks>
             Sample request:
            
                 GET /api/user/events
            
             </remarks>
             <returns>Array of the ViewAllMyEventRegistrations view model</returns>
             <response code="200">Success</response>
        </member>
        <member name="M:VenimusAPIs.UserControllers.UserGroupsController.Post(VenimusAPIs.ViewModels.JoinGroup)">
             <summary>
                 Allows the current user to join a group
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/user/groups
                 {
                     "groupSlug" : "YorkCodeDojo",
                 }
            
             </remarks>
             <returns>The route to the created group</returns>
             <response code="204">Success</response>
             <response code="401">User is not authorized.</response>
             <response code="404">Group does not exist</response>
        </member>
        <member name="M:VenimusAPIs.UserControllers.UserGroupsController.DELETE(System.String)">
             <summary>
                 Allows the current user to leave a group
             </summary>
             <remarks>
             Sample request:
            
                 DELETE /api/user/groups/YorkCodeDojo
            
             </remarks>
             <returns>Nothing</returns>
             <response code="204">Success</response>
             <response code="401">User is not authorized.</response>
             <response code="404">Group does not exist.</response>
        </member>
        <member name="M:VenimusAPIs.UserControllers.UserGroupsEventsController.Put(System.String,System.String,VenimusAPIs.ViewModels.RegisterForEvent)">
             <summary>
                 Allows the current user to update their registration for an event
             </summary>
             <remarks>
             Sample request:
            
                 PUT /api/user/groups/YorkCodeDojo/Events/Nov2019
                 {
                     "numberOfGuest" : 1,
                     "dietaryRequirements" : "Milk free",
                     "messageToOrganiser" : "I might be 10 minutes late"
                 }
            
             </remarks>
             <returns>NoContent</returns>
             <response code="204">Success</response>
             <response code="401">User is not authorized.</response>
             <response code="404">Group does not exist</response>
        </member>
        <member name="M:VenimusAPIs.UserControllers.UserGroupsEventsController.Delete(System.String,System.String)">
             <summary>
                 Allows the current user to decline attending an event
             </summary>
             <remarks>
             Sample request:
            
                 DELETE /api/user/groups/YorkCodeDojo/Events/Nov2019
            
             </remarks>
             <returns>NoContent</returns>
             <response code="204">Success</response>
             <response code="400">Event has already happened</response>
             <response code="404">Group or Event does not exist.</response>
        </member>
        <member name="M:VenimusAPIs.UserControllers.UserGroupsEventsController.Get(System.String,System.String)">
             <summary>
                 Allows the current user to retrieve their registration details for an event
             </summary>
             <remarks>
             Sample request:
            
                 GET /api/user/groups/YorkCodeDojo/Events/Nov2019
            
             </remarks>
             <returns>The GetEvent view model</returns>
             <response code="200">Success</response>
             <response code="404">Group or Event does not exist.</response>
        </member>
        <member name="P:VenimusAPIs.Validation.CallerMustBeApprovedGroupMemberAttribute.CanBeSystemAdministratorInstead">
            <summary>
            The caller doesn't need to be a member of the group if they have the System Administrator role.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Validation.CallerMustBeGroupMemberAttribute.UseNotFoundRatherThanForbidden">
            <summary>
            If the caller doesn't have access to the group then we return NotFound(404) rather than Forbid(403)
            </summary>
        </member>
        <member name="P:VenimusAPIs.Validation.CallerMustBeGroupMemberAttribute.UseNoContentRatherThanForbidden">
            <summary>
            If the caller doesn't have access to the group then we return NoContent(204) rather than Forbid(403).
            A typical case is when a user's group membership is being removed and their aren't currently a member of the group.
            </summary>
        </member>
        <member name="P:VenimusAPIs.Validation.CallerMustBeGroupMemberAttribute.CanBeSystemAdministratorInstead">
            <summary>
            The caller doesn't need to be a member of the group if they have the System Administrator role.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.Answer.Code">
            <summary>
                Unique ID for this question.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.Answer.UsersAnswer">
            <summary>
                Answer from the user
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateEvent.Slug">
            <summary>
                The unique external id for the event.  For example May2019
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateEvent.Title">
            <summary>
            The title of the event,  for example March 2019 Meetup. Must be unique for the group.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateEvent.Description">
            <summary>
            A description of the event,  in markdown format.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateEvent.Location">
            <summary>
            The location of the event, for example York Minster,  Room 201 York St John University
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateEvent.StartTimeUTC">
            <summary>
            Date and time the event starts
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateEvent.EndTimeUTC">
            <summary>
            Date and time the event ends.  Must be after the StartTime
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateEvent.MaximumNumberOfAttendees">
            <summary>
                How many people + guests are allowed to sign up.  This includes hosts and speakers
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateGroup.Slug">
            <summary>
                The unique external code for the group.  For example YorkCodeDojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateGroup.IsActive">
            <summary>
                Is this group still actively running events?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateGroup.Name">
            <summary>
            The unique name for the group / community.  For example York Code Dojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateGroup.Description">
            <summary>
            A description of the group in markdown
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateGroup.StrapLine">
            <summary>
            A very short one-line description of the group
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateGroup.SlackChannelName">
            <summary>
                The name of this groups slack channel
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.CreateGroup.LogoInBase64">
            <summary>
                The group's logo.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetEvent.EventSlug">
            <summary>
                The unique external ID for the event.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetEvent.GroupName">
            <summary>
                The name of the group hosting the event.  For example YorkCodeDojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetEvent.EventTitle">
            <summary>
                The title of the event.  Monthly meeting - October
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetEvent.EventDescription">
            <summary>
                A description of the event in markdown.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetEvent.EventStartsUTC">
            <summary>
                When does the event start,  in UTC time?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetEvent.EventFinishesUTC">
            <summary>
                When does the event finish, in UTC time?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetEvent.EventLocation">
            <summary>
                Where is the event being held?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetEvent.MaximumNumberOfAttendees">
            <summary>
                How many people + guests are allowed to sign up.  This includes hosts and speakers
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetEvent.GuestsAllowed">
            <summary>
                Are members allowed to bring guests to this event?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetEvent.Questions">
            <summary>
                Questions to ask the user when they are registering
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetGroup.Slug">
            <summary>
                The unique external code for the group.  For example YorkCodeDojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetGroup.IsActive">
            <summary>
                Is this group still actively running events?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetGroup.Name">
            <summary>
            The unique name for the group / community.  For example York Code Dojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetGroup.Description">
            <summary>
            A description of the group in markdown
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetGroup.StrapLine">
            <summary>
            A very short one-line description of the group
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetGroup.SlackChannelName">
            <summary>
                The name of this groups slack channel
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetGroup.Logo">
            <summary>
                The group's logo. (Either URL or Base64)
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.GetGroup.CanViewMembers">
            <summary>
                Can this user view the list of members in this group?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.JoinGroup.GroupSlug">
            <summary>
                The slug of the group that the user is joining.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListEventAttendees.Slug">
            <summary>
                The external ID for the user.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListEventAttendees.EmailAddress">
            <summary>
                The email address which also links all the social media accounts together.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListEventAttendees.Pronoun">
            <summary>
                The users preferred personal pronon.  e.g. Him
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListEventAttendees.Fullname">
            <summary>
                The user's fullname.  e.g David Betteridge
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListEventAttendees.DisplayName">
            <summary>
                The user's name within the system.  Ideally the same as their slack name.  e.g. DavidB
                (Has to be unique)
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListEventAttendees.Bio">
            <summary>
                The user's biography.  This can include their place of work/student,  any interests etc.
                Visible to all signed in members
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListEventAttendees.ProfilePictureInBase64">
            <summary>
                The user's profile picture
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListEventAttendees.IsHost">
            <summary>
                Is the event's host
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListEventAttendees.IsSpeaker">
            <summary>
                Is a speaker at the event
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListEventAttendees.IsAttending">
            <summary>
                Is the user attending the event?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListEventAttendees.NumberOfGuests">
            <summary>
                How many guests is this person bringing?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListFutureEvents.EventSlug">
            <summary>
                The unique external ID for the event.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListFutureEvents.GroupName">
            <summary>
                The name of the group hosting the event.  For example YorkCodeDojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListFutureEvents.EventTitle">
            <summary>
                The title of the event.  Monthly meeting - October
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListFutureEvents.EventDescription">
            <summary>
                A description of the event in markdown.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListFutureEvents.EventStartsUTC">
            <summary>
                When does the event start,  in UTC time?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListFutureEvents.EventFinishesUTC">
            <summary>
                When does the event finish, in UTC time?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListFutureEvents.GroupSlug">
            <summary>
                The unique external code for the group.  For example YorkCodeDojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListFutureEvents.GroupLogo">
            <summary>
                The group's logo. (Either URL or Base64)
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroupMembers.Slug">
            <summary>
                The external ID for the user.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroupMembers.EmailAddress">
            <summary>
                The email address which also links all the social media accounts together.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroupMembers.Pronoun">
            <summary>
                The users preferred personal pronon.  e.g. Him
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroupMembers.Fullname">
            <summary>
                The user's fullname.  e.g David Betteridge
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroupMembers.DisplayName">
            <summary>
                The user's name within the system.  Ideally the same as their slack name.  e.g. DavidB
                (Has to be unique)
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroupMembers.Bio">
            <summary>
                The user's biography.  This can include their place of work/student,  any interests etc.
                Visible to all signed in members
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroupMembers.ProfilePicture">
            <summary>
                The URL of the user's profile picture
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroupMembers.IsAdministrator">
            <summary>
                Is the user a group administrator?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroupMembers.IsApproved">
            <summary>
                Has this user's membership to the group been approved?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroups.Slug">
            <summary>
                The unique external code for the group.  For example YorkCodeDojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroups.IsActive">
            <summary>
                Is this group still actively running events?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroups.Name">
            <summary>
            The unique name for the group / community.  For example York Code Dojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroups.Description">
            <summary>
            A description of the group in markdown
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroups.StrapLine">
            <summary>
            A very short one-line description of the group
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroups.SlackChannelName">
            <summary>
                The name of this groups slack channel
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ListGroups.Logo">
            <summary>
                The URL of the groups logo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.Question.Code">
            <summary>
                Unique ID for this question.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.Question.Caption">
            <summary>
                Question shown to the user
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.Question.QuestionType">
            <summary>
                Type of question,  text, date, boolean etc
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.RegisterForEvent.Answers">
            <summary>
                The user's answers
            </summary>
            <returns></returns>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateEvent.Slug">
            <summary>
                The unique external id for the event.  For example May2019
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateEvent.Title">
            <summary>
            The title of the event,  for example March 2019 Meetup. Must be unique for the group.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateEvent.Description">
            <summary>
            A description of the event,  in markdown format.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateEvent.Location">
            <summary>
            The location of the event, for example York Minster,  Room 201 York St John University
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateEvent.StartTimeUTC">
            <summary>
            Date and time the event starts
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateEvent.EndTimeUTC">
            <summary>
            Date and time the event ends.  Must be after the StartTime
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateEvent.MaximumNumberOfAttendees">
            <summary>
                How many people + guests are allowed to sign up.  This includes hosts and speakers
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateEvent.GuestsAllowed">
            <summary>
                Are members allowed to bring guests to this event?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateGroup.Slug">
            <summary>
                The unique external code for the group.  For example YorkCodeDojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateGroup.IsActive">
            <summary>
                Is this group still actively running events?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateGroup.Name">
            <summary>
            The unique name for the group / community.  For example York Code Dojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateGroup.Description">
            <summary>
            A description of the group in markdown
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateGroup.StrapLine">
            <summary>
            A very short one-line description of the group
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateGroup.SlackChannelName">
            <summary>
                The name of this groups slack channel
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateGroup.LogoInBase64">
            <summary>
                The group's logo.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateMyDetails.Pronoun">
            <summary>
                The users preferred personal pronon.  e.g. Him
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateMyDetails.Fullname">
            <summary>
                The user's fullname.  e.g David Betteridge
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateMyDetails.DisplayName">
            <summary>
                The user's name within the system.  Ideally the same as their slack name.  e.g. DavidB
                (Has to be unique)
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateMyDetails.Bio">
            <summary>
                The user's biography.  This can include their place of work/student,  any interests etc.
                Visible to all signed in members
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.UpdateMyDetails.ProfilePictureAsBase64">
            <summary>
                The user's profile picture in base64
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewAllMyEventRegistrations.GroupSlug">
            <summary>
                The unique external code for the group.  For example YorkCodeDojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewAllMyEventRegistrations.EventSlug">
            <summary>
                The unique external ID for the event.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewAllMyEventRegistrations.GroupName">
            <summary>
                The name of the group hosting the event.  For example YorkCodeDojo
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewAllMyEventRegistrations.EventTitle">
            <summary>
                The title of the event.  Monthly meeting - October
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewAllMyEventRegistrations.EventDescription">
            <summary>
                A description of the event in markdown.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewAllMyEventRegistrations.EventStartsUTC">
            <summary>
                When does the event start,  in UTC time?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewAllMyEventRegistrations.EventFinishesUTC">
            <summary>
                When does the event finish, in UTC time?
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewMyDetails.EmailAddress">
            <summary>
                The email address which also links all the social media accounts together.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewMyDetails.Pronoun">
            <summary>
                The users preferred personal pronon.  e.g. Him
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewMyDetails.Fullname">
            <summary>
                The user's fullname.  e.g David Betteridge
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewMyDetails.DisplayName">
            <summary>
                The user's name within the system.  Ideally the same as their slack name.  e.g. DavidB
                (Has to be unique)
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewMyDetails.Bio">
            <summary>
                The user's biography.  This can include their place of work/student,  any interests etc.
                Visible to all signed in members
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewMyDetails.ProfilePictureAsBase64">
            <summary>
                The user's profile picture in base64
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewMyDetails.IsRegistered">
            <summary>
                Has the user completed the registration stage (ie. entered all their details)
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewMyEventRegistration.NumberOfGuests">
            <summary>
                The number of unregistered guests joining the user
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewMyEventRegistration.DietaryRequirements">
            <summary>
                Any Dietary Requirements.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewMyEventRegistration.MessageToOrganiser">
            <summary>
                Free format message to the event host.
            </summary>
        </member>
        <member name="P:VenimusAPIs.ViewModels.ViewMyEventRegistration.Attending">
            <summary>
                Has the user said they are attending the event?
            </summary>
        </member>
    </members>
</doc>
